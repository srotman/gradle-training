task clean(type: Delete) {
	delete 'build'
}

task unzipLogos(type: Copy) {
	from zipTree('src/main/resources/logos.zip')
	into 'build'
}

task censor(type: Copy) {
	from 'src/main/resources'
	into 'build'
	include '*.txt'
	rename { filename -> filename - '.txt' + '-censored.txt' }
	filter { line -> line.replaceAll(/[Ll]orem/, "*****") }

}

task cleanCensor(type: Delete) {
	delete fileTree(dir: 'build', include: '*-censored.txt')
}

task copyLipsum(type: Copy) {
	//TODO: copy all lipsum files from txt to build (unmodified, not censored)
	from 'src/main/resources'
	into 'build'
	include '*.txt'
}

task cleanLipsum(type: Delete) {
	//TODO: clean all lipsum files from build dir (revert the copyLipsum task)
	delete fileTree(dir: 'build', include: '*.txt', exclude: '*-censored.txt')
}

task zipLipsum(type: Zip) {
	//TODO: create a Zip-Archive with only the unmodified files, not the censored ones
	dependsOn copyLipsum
	destinationDir = buildDir
	baseName = 'lipsum'
	classifier = 'unmodified'

	from 'build'
	include '**/*.txt'
	exclude {
		spec -> spec.file.name.endsWith('.txt') &&
			spec.file.name.contains('censored')
	}
}

task zipCensor(type: Zip)  {
	//TODO: create a Zip-Archive with only the censored files, not the unmodified ones
	dependsOn censor
	destinationDir = buildDir
	baseName = 'lipsum'
	classifier = 'censored'

	from('build') {
		include '**/*-censored.txt'
	}
}

task zipAll(type: Zip) {
	//TODO: create a Zip-Archive with both the unmodified and the censored files
	dependsOn censor, copyLipsum
	destinationDir = buildDir
	baseName = 'lipsum'
	classifier = 'all'

	from 'build'
	include '**/*.txt'
}
